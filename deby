#!/usr/bin/env bash

# Setup log file
LOG_FILE="log"
echo "Deby Script Execution - $(date)" > "$LOG_FILE"
echo "===================================" >> "$LOG_FILE"

# Log command result and capture last output line
function log_result {
    local command="$1"
    local section="$2"
    local suppress_output="$3"
    local critical="$4"
    local status
    if [ "$suppress_output" = "1" ]; then
        LAST_OUTPUT=$(eval "$command" > /tmp/cmd_output 2>&1; tail -n 1 /tmp/cmd_output || echo "")
        rm -f /tmp/cmd_output
        if [ $? -eq 0 ]; then
            echo "$section: Ok" >> "$LOG_FILE"
            LAST_OUTPUT=${LAST_OUTPUT:-"[No output]"}
            return 0
        else
            echo "$section: Error" >> "$LOG_FILE"
            LAST_OUTPUT=${LAST_OUTPUT:-"[No output]"}
            [ "$critical" = "1" ] && exit 1
            return 1
        fi
    else
        LAST_OUTPUT=$(eval "$command" > >(tee /tmp/cmd_output) 2>&1; tail -n 1 /tmp/cmd_output || echo "")
        cat /tmp/cmd_output >> "$LOG_FILE"
        rm -f /tmp/cmd_output
        if [ $? -eq 0 ]; then
            echo "$section: Ok" >> "$LOG_FILE"
            LAST_OUTPUT=${LAST_OUTPUT:-"[No output]"}
            return 0
        else
            echo "$section: Error" >> "$LOG_FILE"
            LAST_OUTPUT=${LAST_OUTPUT:-"[No output]"}
            [ "$critical" = "1" ] && exit 1
            return 1
        fi
    fi
}

# Prompt to gather data
function prompt {
    local message="$1"
    local variable="$2"
    local default="$3"
    tput setaf 15
    read -p "${message} (default: ${default}): " value
    tput sgr0
    eval $variable=${value:-$default}
}

# Cool logo message with last command output
function logo() {
    local text="$1"

    local blue=$(tput setaf 4; tput bold)
    local indigo=$(tput setaf 5; tput bold)
    local gray=$(tput setaf 8)  # ANSI gray
    local reset=$(tput sgr0)

    local screen_width=$(tput cols)
    local logo="
███    ██ ██████  ███    ███  ██████      ██████   ██████  ████████ ███████ 
████   ██      ██ ████  ████ ██  ████     ██   ██ ██    ██    ██    ██      
██ ██  ██  █████  ██ ████ ██ ██ ██ ██     ██   ██ ██    ██    ██    ███████ 
██  ██ ██      ██ ██  ██  ██ ████  ██     ██   ██ ██    ██    ██         ██ 
██   ████ ██████  ██      ██  ██████      ██████   ██████     ██    ███████ 
"
    local logo_width=$(echo "$logo" | awk '{ if (length > max) max = length } END { print max }')

    clear

    IFS=$'\n'
    printf "\n"
    for line in $logo
    do
        printf "%*s%s\n" $((($screen_width - ${#line} - 1) / 2)) "" "$indigo$line"
    done

    printf "\n%*s%s%s%s\n" $((($screen_width - ${#text} - 1) / 2)) "" "$blue" "$text" "$reset"
    printf "%*s%s[%s]%s\n\n" $((($screen_width - ${#LAST_OUTPUT} - 2 - 1) / 2)) "" "$gray" "$LAST_OUTPUT" "$reset"
}

logo "Press any key to continue..."
read

# Information gathering
echo "==== Information Gathering" >> "$LOG_FILE"
prompt "Username" USERNAME "user"
prompt "Shell" SHELL /bin/bash
prompt "Keymap" KEYMAP us
prompt "Console font" CONSOLE_FONT Terminus32x16
prompt "IRSSI username" IRSSI_USERNAME "None"
prompt "IRSSI password" IRSSI_PASSWORD "None"
prompt "Github token (optional)" TOKEN "None"

# Ensure user exists
if ! id "$USERNAME" &>/dev/null; then
    logo "Creating user $USERNAME..."
    echo "==== Create User" >> "$LOG_FILE"
    log_result "useradd -m -s \"$SHELL\" \"$USERNAME\"" "Create user $USERNAME" 0 1 || exit 1
    log_result "passwd \"$USERNAME\"" "Set password for $USERNAME" 0 1 || exit 1
fi

# Update package list
logo "Updating package list..."
echo "=== Update Package List" >> "$LOG_FILE"
log_result "apt update" "Update package list"

# Install build essentials and git for compiling software
logo "Installing build essentials and git..."
echo "=== Install Build Essentials" >> "$LOG_FILE"
log_result "apt install -y build-essential git curl" "Install build essentials and git" 1

if [[ ! -f "packages" ]]; then
    logo "Error: packages file not found!"
    echo "==== Check Packages File" >> "$LOG_FILE"
    echo "Check packages file: Error" >> "$LOG_FILE"
    exit 1
fi

# Configure Debian Sid for ly
logo "Configuring Debian Sid repository..."
echo "=== Configure Debian Sid" >> "$LOG_FILE"
log_result "echo 'deb http://deb.debian.org/debian sid main' > /etc/apt/sources.list.d/sid.list && echo -e 'Package: *\nPin: release a=sid\nPin-Priority: 100' > /etc/apt/preferences.d/sid && apt update" "Configure Sid repository"

logo "Installing packages..."
echo "=== Installing Packages" >> "$LOG_FILE"
while read package
do
    if [[ $package == "" ]] || [[ $package == \#* ]]; then
        continue
    fi
    logo "Installing: $package..."
    log_result "apt install -y \"$package\"" "Install $package" 1
done < packages

logo "Adding no password sudo rights for $USERNAME..."
echo "=== Sudo Configuration" >> "$LOG_FILE"
log_result "echo \"$USERNAME ALL=(ALL:ALL) NOPASSWD: ALL\" > /etc/sudoers.d/nopasswd_sudo && chmod 440 /etc/sudoers.d/nopasswd_sudo" "Set sudo rights"

logo "Stowing bin directory..."
echo "=== Stow Bin Directory" >> "$LOG_FILE"
if [ -d "/root/dots/config/bin" ]; then
    log_result "su - \"$USERNAME\" -c \"stow -vd /root/dots/config/ -t ~ bin\"" "Stow bin directory"
else
    log_result "su - \"$USERNAME\" -c \"mkdir -p ~/bin\"" "Create bin directory"
    echo "Warning: /root/dots/config/bin not found, created ~/bin instead" >> "$LOG_FILE"
fi

logo "Adding yamete kudasai sound on usb mount / unmount..."
echo "=== USB Sound Configuration" >> "$LOG_FILE"
log_result "echo -ne \"KERNEL==\\\"sd*\\\", SUBSYSTEM==\\\"block\\\", ENV{DEVTYPE}==\\\"partition\\\", ACTION==\\\"add\\\", ENV{ID_FS_TYPE}!=\\\"vfat\\\", ENV{ID_FS_USAGE}==\\\"filesystem\\\", RUN+=\\\"/usr/bin/aplay /home/$USERNAME/bin/sound/yamete.wav\\\"\\nKERNEL==\\\"sd*\\\", SUBSYSTEM==\\\"block\\\", ENV{DEVTYPE}==\\\"partition\\\", ACTION==\\\"remove\\\", ENV{ID_FS_TYPE}!=\\\"vfat\\\", ENV{ID_FS_USAGE}==\\\"filesystem\\\", RUN+=\\\"/usr/bin/aplay /home/$USERNAME/bin/sound/ahh.wav\\\"\\n\" > /etc/udev/rules.d/99-usb-sound.rules && udevadm control --reload-rules" "Set USB sound rules"

logo "Automount USB drive..."
echo "=== USB Automount" >> "$LOG_FILE"
log_result "echo 'UUID=CA18-653E /mnt vfat noauto,nofail,systemd.automount,systemd.idle-timeout=2,systemd.device-timeout=2 0 0' >> /etc/fstab && systemctl daemon-reload && systemctl restart local-fs.target" "Set USB automount"

logo "Switch shell to '${SHELL}'..."
echo "=== Shell Configuration" >> "$LOG_FILE"
log_result "chsh -s \"$SHELL\" root && chsh -s \"$SHELL\" \"$USERNAME\"" "Set shells"

logo "Setting keymap and console font..."
echo "=== Keymap and Console Font" >> "$LOG_FILE"
{
    log_result "echo 'XKBMODEL=pc105' > /etc/default/keyboard" "Set keyboard model" &&
    log_result "echo 'XKBLAYOUT=$KEYMAP' >> /etc/default/keyboard" "Set keymap" &&
    log_result "echo 'FONT=$CONSOLE_FONT' > /etc/default/console-setup" "Set console font" &&
    log_result "echo 'CHARMAP=UTF-8' >> /etc/default/console-setup" "Set console charset" &&
    log_result "dpkg-reconfigure -f noninteractive keyboard-configuration" "Apply keyboard configuration" &&
    log_result "dpkg-reconfigure -f noninteractive console-setup" "Apply console setup"
} || echo "Keymap and console font: Error" >> "$LOG_FILE"

logo "Disabling Screen Tear..."
echo "=== Screen Tear Configuration" >> "$LOG_FILE"
log_result "mkdir -p /etc/X11/xorg.conf.d && echo -ne 'Section \"Device\"\n  Identifier \"Intel Graphics\"\n  Driver \"intel\"\n  Option \"TearFree\" \"true\"\nEndSection\n' > /etc/X11/xorg.conf.d/20-intel.conf" "Set screen tear config"

logo "Updating Touchpad Configuration..."
echo "=== Touchpad Configuration" >> "$LOG_FILE"
log_result "echo -ne 'Section \"InputClass\"\n    Identifier \"libinput touchpad catchall\"\n    MatchIsTouchpad \"on\"\n    MatchDevicePath \"/dev/input/event*\"\n    Option \"Tapping\" \"True\"\n    Option \"TappingDrag\" \"True\"\n    Option \"ScrollMethod\" \"Twofinger\"\n    Option \"NaturalScrolling\" \"False\"\n    Option \"DisableWhileTyping\" \"False\"\n    Driver \"libinput\"\nEndSection\n' > /etc/X11/xorg.conf.d/40-libinput.conf" "Set touchpad config"

logo "Slock Configuration..."
echo "=== Slock Configuration" >> "$LOG_FILE"
log_result "echo -ne '[Unit]\nDescription=Lock X session using slock for user %i\nBefore=sleep.target\n\n[Service]\nUser=%i\nEnvironment=DISPLAY=:0\nExecStartPre=/usr/bin/xset dpms force suspend\nExecStart=/usr/local/bin/slock\n\n[Install]\nWantedBy=sleep.target\n' > /etc/systemd/system/slock@.service" "Set slock service"

logo "Github configuration..."
echo "=== Github Configuration" >> "$LOG_FILE"
if [ "$TOKEN" != "None" ]; then
    log_result "su - \"$USERNAME\" -c \"echo -ne 'https://$USERNAME:$TOKEN@github.com' > ~/.git-credentials && git config --global credential.helper store\"" "Set git config"
else
    echo "Github configuration: Ok" >> "$LOG_FILE"
fi

logo "Font configuration..."
echo "=== Font Configuration" >> "$LOG_FILE"
{
    log_result "mkdir -p /usr/share/fonts/truetype" "Create fonts directory" &&
    log_result "cd /usr/share/fonts/truetype && timeout 30s curl -fLo 'FiraCode.zip' https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/FiraCode.zip && unzip -o FiraCode.zip 'FiraCodeNerdFont-Bold.ttf' && rm FiraCode.zip" "Download and install font" &&
    log_result "fc-cache -fv" "Update font cache" &&
    log_result "cd /home/$USERNAME" "Return to user home"
} || echo "Font configuration: Error" >> "$LOG_FILE"

logo "Creating .build folder..."
echo "=== Build Directory Setup" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"mkdir -p ~/.build\"" "Create build directory"

logo "Cloning repositories..."
echo "=== Cloning Repositories" >> "$LOG_FILE"
{
    if [ ! -d "/home/$USERNAME/.build/tily" ]; then
        log_result "su - \"$USERNAME\" -c \"cd ~/.build && git clone https://github.com/nemo256/tily\"" "Clone tily"
    else
        echo "Clone tily: Skipped - directory exists" >> "$LOG_FILE"
    fi
    if [ ! -d "/home/$USERNAME/.build/st" ]; then
        log_result "su - \"$USERNAME\" -c \"cd ~/.build && git clone https://github.com/nemo256/st\"" "Clone st"
    else
        echo "Clone st: Skipped - directory exists" >> "$LOG_FILE"
    fi
    if [ ! -d "/home/$USERNAME/.build/dmenu" ]; then
        log_result "su - \"$USERNAME\" -c \"cd ~/.build && git clone https://github.com/nemo256/dmenu\"" "Clone dmenu"
    else
        echo "Clone dmenu: Skipped - directory exists" >> "$LOG_FILE"
    fi
    if [ ! -d "/home/$USERNAME/.build/slock" ]; then
        log_result "su - \"$USERNAME\" -c \"cd ~/.build && git clone https://github.com/nemo256/slock\"" "Clone slock"
    else
        echo "Clone slock: Skipped - directory exists" >> "$LOG_FILE"
    fi
    if [ ! -d "/home/$USERNAME/.build/slstatus" ]; then
        log_result "su - \"$USERNAME\" -c \"cd ~/.build && git clone https://github.com/nemo256/slstatus\"" "Clone slstatus"
    else
        echo "Clone slstatus: Skipped - directory exists" >> "$LOG_FILE"
    fi
    if [ ! -d "/home/$USERNAME/.build/fetchy" ]; then
        log_result "su - \"$USERNAME\" -c \"cd ~/.build && git clone https://github.com/nemo256/fetchy\"" "Clone fetchy"
    else
        echo "Clone fetchy: Skipped - directory exists" >> "$LOG_FILE"
    fi
    if [ ! -d "/home/$USERNAME/.build/ani-cli" ]; then
        log_result "su - \"$USERNAME\" -c \"cd ~/.build && git clone https://github.com/pystardust/ani-cli\"" "Clone ani-cli"
    else
        echo "Clone ani-cli: Skipped - directory exists" >> "$LOG_FILE"
    fi
    if [ ! -d "/home/$USERNAME/.build/tty-clock" ]; then
        log_result "su - \"$USERNAME\" -c \"cd ~/.build && git clone https://github.com/xorg62/tty-clock\"" "Clone tty-clock"
    else
        echo "Clone tty-clock: Skipped - directory exists" >> "$LOG_FILE"
    fi
    if [ ! -d "/home/$USERNAME/.build/grabc" ]; then
        log_result "su - \"$USERNAME\" -c \"cd ~/.build && git clone https://github.com/muquit/grabc\"" "Clone grabc"
    else
        echo "Clone grabc: Skipped - directory exists" >> "$LOG_FILE"
    fi
    if [ ! -d "/home/$USERNAME/.build/tremc" ]; then
        log_result "su - \"$USERNAME\" -c \"cd ~/.build && git clone https://github.com/tremc/tremc\"" "Clone tremc"
    else
        echo "Clone tremc: Skipped - directory exists" >> "$LOG_FILE"
    fi
} || echo "Cloning repositories: Error" >> "$LOG_FILE"

logo "Installing repositories..."
echo "=== Installing Repositories" >> "$LOG_FILE"
{
    log_result "su - \"$USERNAME\" -c \"cd ~/.build/tily && make clean && sudo make install\"" "Install tily" 0 1 &&
    log_result "su - \"$USERNAME\" -c \"cd ~/.build/st && make clean && sudo make install\"" "Install st" 0 1 &&
    log_result "su - \"$USERNAME\" -c \"cd ~/.build/dmenu && make clean && sudo make install\"" "Install dmenu" 0 1 &&
    log_result "su - \"$USERNAME\" -c \"cd ~/.build/slock && make clean && sudo make install\"" "Install slock" &&
    log_result "su - \"$USERNAME\" -c \"cd ~/.build/slstatus && make clean && sudo make install\"" "Install slstatus" &&
    log_result "su - \"$USERNAME\" -c \"cd ~/.build/fetchy && make clean && sudo make install\"" "Install fetchy" &&
    log_result "su - \"$USERNAME\" -c \"cd ~/.build/ani-cli && chmod +x ani-cli && sudo cp -fvr ani-cli /usr/local/bin/ani-cli\"" "Install ani-cli" &&
    log_result "su - \"$USERNAME\" -c \"cd ~/.build/tty-clock && make && sudo make install\"" "Install tty-clock" &&
    log_result "su - \"$USERNAME\" -c \"cd ~/.build/grabc && make && sudo make install\"" "Install grabc" &&
    log_result "su - \"$USERNAME\" -c \"cd ~/.build/tremc && sudo make install\"" "Install tremc"
} || echo "Installing repositories: Error" >> "$LOG_FILE"

logo "Installing alder..."
echo "=== Install Alder" >> "$LOG_FILE"
log_result "yarnpkg global add @aweary/alder" "Install alder"

logo "Installing weather-cli..."
echo "=== Install Weather CLI" >> "$LOG_FILE"
log_result "yarnpkg global add weather-cli" "Install weather-cli"

logo "Installing Ly display manager..."
echo "=== Ly Configuration" >> "$LOG_FILE"
{
    log_result "apt install -y ly" "Install Ly" 1 1 &&
    log_result "systemctl enable ly" "Enable Ly service" 0 1
} || echo "Ly configuration: Error" >> "$LOG_FILE"

logo "Restoring home directory..."
echo "=== Home Directory Setup" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"mkdir -p ~/dl ~/vids ~/work\"" "Create home directories"

#logo "Cloning wals..."
#echo "=== Clone Wals" >> "$LOG_FILE"
#log_result "su - \"$USERNAME\" -c \"git clone https://github.com/nemo256/wals ~/wals\"" "Clone wals"

logo "Removing default configuration files..."
echo "=== Configuration Cleanup" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"rm -fvr ~/.bash* ~/.gitconfig ~/.config/*\"" "Remove default configs"

# Get list of programs
programs=$(find "/root/dots/config" -maxdepth 1 -mindepth 1 -type d -printf "%f\n")
echo "=== Stowing Configurations" >> "$LOG_FILE"
if [ -d "/root/dots/config" ] && [ -n "$programs" ]; then
    logo "Stowing configuration files..."
    for program in ${programs}; do
        if [[ ${program} != "irssi" && ${program} != "bin" ]]; then
            log_result "su - \"$USERNAME\" -c \"stow -vd /root/dots/config/ -t ~ ${program}\"" "Stow $program"
        fi
    done
else
    echo "Stowing configurations: Error - /root/dots/config missing or empty" >> "$LOG_FILE"
fi

logo "Make binary files executable..."
echo "=== Binary Permissions" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"chmod -R 755 ~/bin\"" "Set bin permissions"

logo "Ranger Configuration..."
echo "=== Ranger Configuration" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons && cd ~/.config/ranger/plugins/ranger_devicons && python3 -m devicons\"" "Set ranger config"

logo "Managing Essential Services..."
echo "=== Service Management" >> "$LOG_FILE"
log_result "systemctl enable bluetooth && systemctl enable slock@$USERNAME && systemctl enable ly" "Manage services"

logo "Installing disable_prochot service..."
echo "=== Disable Prochot Service" >> "$LOG_FILE"
log_result "cp disable_prochot.service /etc/systemd/system/disable_prochot.service && systemctl enable disable_prochot" "Set disable_prochot service"

logo "Done - Script finished installing and configuring n3m0's dots!"
echo "==== Script Completed" >> "$LOG_FILE"
echo "Finished at $(date)" >> "$LOG_FILE"
