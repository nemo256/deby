#!/usr/bin/env bash

# Setup log file
LOG_FILE="log"
echo "Deby Script Execution - $(date)" > "$LOG_FILE"
echo "===================================" >> "$LOG_FILE"

# Log command result
function log_result {
    local command="$1"
    local section="$2"
    if eval "$command" >/dev/null 2>&1; then
        echo "$section: Ok" >> "$LOG_FILE"
        return 0
    else
        echo "$section: Error" >> "$LOG_FILE"
        return 1
    fi
}

# Prompt to gather data
function prompt {
    local message="$1"
    local variable="$2"
    local default="$3"
    tput setaf 15
    read -p "${message} (default: ${default}): " value
    tput sgr0
    eval $variable=${value:-$default}
}

# Cool logo message
function logo() {
    local text="$1"

    local blue=$(tput setaf 4; tput bold)
    local indigo=$(tput setaf 5; tput bold)
    local text_color=$(tput bold)

    local screen_width=$(tput cols)
    local logo="
███    ██ ██████  ███    ███  ██████      ██████   ██████  ████████ ███████ 
████   ██      ██ ████  ████ ██  ████     ██   ██ ██    ██    ██    ██      
██ ██  ██  █████  ██ ████ ██ ██ ██ ██     ██   ██ ██    ██    ██    ███████ 
██  ██ ██      ██ ██  ██  ██ ████  ██     ██   ██ ██    ██    ██         ██ 
██   ████ ██████  ██      ██  ██████      ██████   ██████     ██    ███████ 
"
    local logo_width=$(echo "$logo" | awk '{ if (length > max) max = length } END { print max }')

    clear

    IFS=$'\n'
    printf "\n"
    for line in $logo
    do
        printf "%*s%s\n" $((($screen_width - ${#line} - 1) / 2)) "" "$indigo$line"
    done

    printf "\n%*s%s%s%*s\n\n" $((($screen_width - ${#text} - 1) / 2)) "" "$blue" "$text" $((($screen_width + ${#text} + ${#text} - $logo_width) / 2)) ""

    tput sgr0
    echo "==== Display Logo" >> "$LOG_FILE"
}

logo "Press any key to continue..."
read

# Information gathering
echo "==== Information Gathering" >> "$LOG_FILE"
prompt "Username" USERNAME "user"
prompt "Shell" SHELL /bin/bash
prompt "Keymap" KEYMAP us
prompt "Console font" CONSOLE_FONT Terminus32x16
prompt "IRSSI username" IRSSI_USERNAME "None"
prompt "IRSSI password" IRSSI_PASSWORD "None"
prompt "Github token (optional)" TOKEN "None"

# Ensure user exists
if ! id "$USERNAME" &>/dev/null; then
    logo "Creating user $USERNAME..."
    echo "==== Create User" >> "$LOG_FILE"
    log_result "useradd -m -s \"$SHELL\" \"$USERNAME\"" "Create user $USERNAME" || exit 1
    log_result "passwd \"$USERNAME\"" "Set password for $USERNAME" || exit 1
fi

# Update package list
logo "Updating package list..."
log_result "apt update" "Update package list" || exit 1

# Install build essentials and git for compiling software
logo "Installing build essentials and git..."
log_result "apt install -y build-essential git curl" "Install build essentials and git" || exit 1

if [[ ! -f "packages" ]]; then
    logo "Error: packages file not found!"
    echo "==== Check Packages File" >> "$LOG_FILE"
    echo "Check packages file: Error" >> "$LOG_FILE"
    exit 1
fi

logo "Installing packages..."
echo "==== Installing Packages" >> "$LOG_FILE"
while read package
do
    if [[ $package == "" ]] || [[ $package == \#* ]]; then
        continue
    fi
    logo "Installing: $package..."
    log_result "apt install -y \"$package\"" "Install $package"
done < packages

logo "Switch shell to '${SHELL}'..."
echo "==== Shell Configuration" >> "$LOG_FILE"
log_result "chsh -s \"$SHELL\" root && chsh -s \"$SHELL\" \"$USERNAME\"" "Set shells" || exit 1

logo "Setting keymap and console font..."
echo "==== Keymap and Console Font" >> "$LOG_FILE"
{
    log_result "echo 'XKBMODEL=pc105' > /etc/default/keyboard" "Set keyboard model" &&
    log_result "echo 'XKBLAYOUT=$KEYMAP' >> /etc/default/keyboard" "Set keymap" &&
    log_result "echo 'FONT=$CONSOLE_FONT' > /etc/default/console-setup" "Set console font" &&
    log_result "echo 'CHARMAP=UTF-8' > /etc/default/console-setup" "Set console charset" &&
    log_result "dpkg-reconfigure -f noninteractive keyboard-configuration" "Apply keyboard configuration" &&
    log_result "dpkg-reconfigure -f noninteractive console-setup" "Apply console setup"
} || exit 1

logo "Adding no password sudo rights for $USERNAME..."
echo "==== Sudo Configuration" >> "$LOG_FILE"
log_result "echo \"$USERNAME ALL=(ALL:ALL) NOPASSWD: ALL\" > /etc/sudoers.d/nopasswd_sudo && chmod 440 /etc/sudoers.d/nopasswd_sudo" "Set sudo rights" || exit 1

logo "Adding yamete kudasai sound on usb mount / unmount..."
echo "==== USB Sound Configuration" >> "$LOG_FILE"
log_result "echo -ne \"KERNEL==\\\"sd*\\\", SUBSYSTEM==\\\"block\\\", ENV{DEVTYPE}==\\\"partition\\\", ACTION==\\\"add\\\", ENV{ID_FS_TYPE}!=\\\"vfat\\\", ENV{ID_FS_USAGE}==\\\"filesystem\\\", RUN+=\\\"/usr/bin/aplay /home/$USERNAME/bin/sound/yamete.wav\\\"\\nKERNEL==\\\"sd*\\\", SUBSYSTEM==\\\"block\\\", ENV{DEVTYPE}==\\\"partition\\\", ACTION==\\\"remove\\\", ENV{ID_FS_TYPE}!=\\\"vfat\\\", ENV{ID_FS_USAGE}==\\\"filesystem\\\", RUN+=\\\"/usr/bin/aplay /home/$USERNAME/bin/sound/ahh.wav\\\"\\n\" > /etc/udev/rules.d/99-usb-sound.rules && udevadm control --reload-rules" "Set USB sound rules" || exit 1

logo "Automount USB drive..."
echo "==== USB Automount" >> "$LOG_FILE"
log_result "echo 'UUID=CA18-653E /mnt vfat noauto,nofail,systemd.automount,systemd.idle-timeout=2,systemd.device-timeout=2 0 0' >> /etc/fstab && systemctl daemon-reload && systemctl restart local-fs.target" "Set USB automount" || exit 1

logo "Disabling Screen Tear..."
echo "==== Screen Tear Configuration" >> "$LOG_FILE"
log_result "mkdir -p /etc/X11/xorg.conf.d && echo -ne 'Section \"Device\"\n  Identifier \"Intel Graphics\"\n  Driver \"intel\"\n  Option \"TearFree\" \"true\"\nEndSection\n' > /etc/X11/xorg.conf.d/20-intel.conf" "Set screen tear config" || exit 1

logo "Updating Touchpad Configuration..."
echo "==== Touchpad Configuration" >> "$LOG_FILE"
log_result "echo -ne 'Section \"InputClass\"\n    Identifier \"libinput touchpad catchall\"\n    MatchIsTouchpad \"on\"\n    MatchDevicePath \"/dev/input/event*\"\n    Option \"Tapping\" \"True\"\n    Option \"TappingDrag\" \"True\"\n    Option \"ScrollMethod\" \"Twofinger\"\n    Option \"NaturalScrolling\" \"False\"\n    Option \"DisableWhileTyping\" \"False\"\n    Driver \"libinput\"\nEndSection\n' > /etc/X11/xorg.conf.d/40-libinput.conf" "Set touchpad config" || exit 1

logo "Slock Configuration..."
echo "==== Slock Configuration" >> "$LOG_FILE"
log_result "echo -ne '[Unit]\nDescription=Lock X session using slock for user %i\nBefore=sleep.target\n\n[Service]\nUser=%i\nEnvironment=DISPLAY=:0\nExecStartPre=/usr/bin/xset dpms force suspend\nExecStart=/usr/local/bin/slock\n\n[Install]\nWantedBy=sleep.target\n' > /etc/systemd/system/slock@.service" "Set slock service" || exit 1

logo "Github configuration..."
echo "==== Github Configuration" >> "$LOG_FILE"
if [ "$TOKEN" != "None" ]; then
    log_result "su - \"$USERNAME\" -c \"echo -ne 'https://$USERNAME:$TOKEN@github.com' > ~/.git-credentials && git config --global credential.helper store\"" "Set git config" || exit 1
else
    echo "Github configuration: Ok" >> "$LOG_FILE"
fi

logo "Font configuration..."
echo "==== Font Configuration" >> "$LOG_FILE"
log_result "mkdir -p /usr/share/fonts/truetype && cd /usr/share/fonts/truetype && curl -fLo 'FiraCodeNerdFont-Bold.ttf' https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/FiraCode/Bold/complete/Fira%20Code%20Bold%20Nerd%20Font%20Complete.ttf && fc-cache -fv && cd /home/$USERNAME" "Set font config" || exit 1

logo "Creating .build folder..."
echo "==== Build Directory Setup" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"mkdir -p ~/.build\" && cd /home/$USERNAME/.build" "Create build directory" || exit 1

logo "Cloning tily (Custom dwm fork)..."
echo "==== Cloning Repositories" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"git clone https://github.com/nemo256/tily && git clone https://github.com/nemo256/st && git clone https://github.com/nemo256/dmenu && git clone https://github.com/nemo256/slock && git clone https://github.com/nemo256/slstatus && git clone https://github.com/nemo256/fetchy && git clone https://github.com/pystardust/ani-cli && git clone https://github.com/xorg62/tty-clock && git clone https://github.com/muquit/grabc && git clone https://github.com/tremc/tremc\"" "Clone repositories" || exit 1

logo "Installing tily..."
echo "==== Amendatory
log_result "cd tily && make clean install && cd ../st && make clean install && cd ../dmenu && make clean install && cd ../slock && make clean install && cd ../slstatus && make clean install && cd ../fetchy && make clean install && cd ../ani-cli && chmod +x ani-cli && cp -fvr ani-cli /usr/local/bin/ani-cli && cd ../tty-clock && make && make install && cd ../grabc && make && make install && cd ../tremc && make install" "Install software" || exit 1

logo "Installing alder..."
echo "==== Install Alder" >> "$LOG_FILE"
log_result "npm install -g @aweary/alder" "Install alder" || exit 1

logo "Installing weather-cli..."
echo "==== Install Weather CLI" >> "$LOG_FILE"
log_result "npm install -g weather-cli" "Install weather-cli" || exit 1

logo "Restoring home directory..."
echo "==== Home Directory Setup" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"mkdir -p ~/dl ~/vids ~/work\"" "Create home directories" || exit 1

logo "Cloning wals..."
echo "==== Clone Wals" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"git clone https://github.com/nemo256/wals ~/wals\"" "Clone wals" || exit 1

logo "Removing default configuration files..."
echo "==== Configuration Cleanup" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"rm -fvr ~/.bash* ~/.gitconfig ~/.config/*\"" "Remove default configs" || exit 1

# Get list of programs
programs=$(find "/root/dots/config" -maxdepth 1 -mindepth 1 -type d -printf "%f\n")
echo "==== Stowing Configurations" >> "$LOG_FILE"
if [ -n "$programs" ]; then
    logo "Stowing configuration files..."
    for program in ${programs}; do
        if [[ ${program} != "irssi" ]]; then
            log_result "su - \"$USERNAME\" -c \"stow -vd /root/dots/config/ -t ~ ${program}\"" "Stow $program" || exit 1
        fi
    done
else
    echo "Stowing configurations: Error" >> "$LOG_FILE"
    exit 1
fi

# logo "Irssi configuration..."
# echo "==== Irssi Configuration" >> "$LOG_FILE"
# log_result "su - \"$USERNAME\" -c \"cp -fvr ~/dots/config/irssi/.irssi ~\"" "Copy irssi config" || exit 1
# log_result "su - \"$USERNAME\" -c \"sed -i 's/sasl_username = \".*\"/sasl_username = \"$IRSSI_USERNAME\"/' ~/.irssi/config\"" "Set irssi username" || exit 1
# log_result "su - \"$USERNAME\" -c \"sed -i 's/sasl_password = \".*\"/sasl_password = \"$IRSSI_PASSWORD\"/' ~/.irssi/config\"" "Set irssi password" || exit 1
# log_result "su - \"$USERNAME\" -c \"sed -i 's/nick = \".*\"/nick = \"$IRSSI_USERNAME\"/' ~/.irssi/config\"" "Set irssi nick" || exit 1

logo "Make binary files executable..."
echo "==== Binary Permissions" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"chmod -R 755 ~/bin\"" "Set bin permissions" || exit 1

# logo "Vimy configuration..."
# echo "==== Vimy Configuration" >> "$LOG_FILE"
# log_result "su - \"$USERNAME\" -c \"git clone https://github.com/nemo256/vimy ~/.config/nvim\"" "Clone vimy" || exit 1
# log_result "su - \"$USERNAME\" -c \"git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim\"" "Clone packer.nvim" || exit 1
# log_result "su - \"$USERNAME\" -c \"nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'\"" "Run PackerSync" || exit 1
# log_result "su - \"$USERNAME\" -c \"mkdir ~/.config/nvim/session\"" "Create nvim session directory" || exit 1

logo "Ranger Configuration..."
echo "==== Ranger Configuration" >> "$LOG_FILE"
log_result "su - \"$USERNAME\" -c \"git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons && cd ~/.config/ranger/plugins/ranger_devicons && python -m devicons\"" "Set ranger config" || exit 1

# logo "Protonvpn configuration..."
# echo "==== ProtonVPN Configuration" >> "$LOG_FILE"
# log_result "apt install -y openvpn dialog python3-pythondialog" "Install ProtonVPN dependencies" || exit 1
# log_result "curl -fsSL https://repo.protonvpn.com/debian/dists/stable/main/binary-all/protonvpn-stable-release_1.0.3-3_all.deb -o protonvpn.deb" "Download ProtonVPN package" || exit 1
# log_result "dpkg -i protonvpn.deb && rm protonvpn.deb" "Install ProtonVPN package" || exit 1
# log_result "apt update" "Update package list after ProtonVPN" || exit 1
# log_result "apt install -y protonvpn-cli" "Install ProtonVPN CLI" || exit 1
# log_result "su - \"$USERNAME\" -c \"protonvpn-cli config --vpn-accelerator enable\"" "Enable VPN accelerator" || exit 1

logo "Ly configuration..."
echo "==== Ly Configuration" >> "$LOG_FILE"
{
    log_result "apt install -y libpam0g-dev libxcb-xkb-dev" "Install Ly dependencies" &&
    log_result "git clone https://github.com/fairyglade/ly /tmp/ly" "Clone Ly" &&
    log_result "cd /tmp/ly && make" "Build Ly" &&
    log_result "cd /tmp/ly && make install" "Install Ly" &&
    log_result "systemctl enable ly" "Enable Ly service" &&
    log_result "cd /home/$USERNAME" "Return to user home"
} || exit 1

logo "Managing Essential Services..."
echo "==== Service Management" >> "$LOG_FILE"
log_result "systemctl disable transmission-daemon && systemctl enable bluetooth && systemctl enable slock@$USERNAME && systemctl enable ly" "Manage services" || exit 1

logo "Installing prochot service..."
echo "==== Prochot Service" >> "$LOG_FILE"
log_result "cp prochot.service /etc/systemd/system/prochot.service && systemctl enable prochot" "Set prochot service" || exit 1

logo "Done - Script finished installing and configuring n3m0's dots!"
echo "==== Script Completed" >> "$LOG_FILE"
echo "Finished at $(date)" >> "$LOG_FILE"
